#!/bin/bash

POSITIONAL_ARGS=()

SHOULD_REMOVE_CLONED_REPOS=0
SHOULD_CLONE_REPOS=0
SHOULD_CLONE_LOCAL_REPOS=0
SHOULD_BUILD_PROJECTS=0
SHOULD_RUN_OPENPILOT_SIM=0
DEBUG_OPENPILOT_BRIDGE=0
DEBUG_INFERENCE_NODE_BRIDGE=0
SHOULD_EXEC=0
while [[ $# -gt 0 ]]; do
  case $1 in
    --exec)
      SHOULD_EXEC=1
      EXEC_SERVICE_NAME="$2"
      shift
      shift
      ;;
    --rm_cloned)
      SHOULD_REMOVE_CLONED_REPOS=1
      shift
      ;;
    --clone)
      SHOULD_CLONE_REPOS=1
      shift
      ;;
    --clone_local)
      SHOULD_CLONE_LOCAL_REPOS=1
      shift
      ;;
    --build_projects)
      SHOULD_BUILD_PROJECTS=1
      shift
      ;;
    --sim)
      SHOULD_RUN_OPENPILOT_SIM=1
      shift
      ;;
    --dbg_openpilot_bridge)
      DEBUG_OPENPILOT_BRIDGE=1
      shift
      ;;
    --dbg_inference_node_bridge)
      DEBUG_INFERENCE_NODE_BRIDGE=1
      shift
      ;;
    --*|-*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

GROUP_ID=$(id -g)
USER_ID=$(id -u)

REPOS_PATH=${HOME}/inference-repos
OPENPILOT_PATH=${REPOS_PATH}/openpilot
ASLAN_PATH=${REPOS_PATH}/aslan
OPENPILOT_BRIDGE_PATH=${REPOS_PATH}/openpilot-bridge
INFERENCE_NODE_BRIDGE_PATH=${REPOS_PATH}/inference-node-bridge
REPO_PATHS=("${OPENPILOT_PATH}" "${ASLAN_PATH}" "${OPENPILOT_BRIDGE_PATH}" "${INFERENCE_NODE_BRIDGE_PATH}")

LOCAL_REPOS_PATH=${HOME}/repos
LOCAL_OPENPILOT_PATH=${LOCAL_REPOS_PATH}/bukapilot
LOCAL_ASLAN_PATH=${LOCAL_REPOS_PATH}/aslan
LOCAL_OPENPILOT_BRIDGE_PATH=${LOCAL_REPOS_PATH}/openpilot-bridge
LOCAL_INFERENCE_NODE_BRIDGE_PATH=${LOCAL_REPOS_PATH}/inference-node-bridge

SHOULD_BUILD_ASLAN=0
SHOULD_BUILD_OPENPILOT=0

export SHOULD_RUN_OPENPILOT_SIM
export DEBUG_OPENPILOT_BRIDGE
export DEBUG_INFERENCE_NODE_BRIDGE

export OPENPILOT_PATH
export ASLAN_PATH
export OPENPILOT_BRIDGE_PATH
export INFERENCE_NODE_BRIDGE_PATH

export GROUP_ID
export USER_ID

export SHOULD_BUILD_ASLAN
export SHOULD_BUILD_OPENPILOT

if [ ${SHOULD_EXEC} = 1 ]; then
  docker-compose exec -it ${EXEC_SERVICE_NAME} bash
  exit 0
fi

if [[ ${SHOULD_REMOVE_CLONED_REPOS} = 1 ]]; then
  for repo_path in ${REPO_PATHS[@]}; do
      cd "${repo_path}"

      if [ ! -z "$(git status --porcelain)" ]; then
        echo "Git repo ${repo_path} is not clean, aborting the removal..."
        exit 0
      fi

      cd - > /dev/null
  done

  echo "All changes commited in the cloned repos"
  while true; do
      read -p "Do you wish to remove all cloned repos? (yn): " yn
    case $yn in
      [Yy]* )
        echo 'Removing the repos...'

        for repo_path in ${REPO_PATHS[@]}; do
          sudo rm -rf "${repo_path}"
        done

        if [[ -z "$(ls -A ${REPOS_PATH})" ]]; then
          rm -rf "${REPOS_PATH}"
        else
          echo "Cannot remove ${REPOS_PATH} directory since it's not empty!"
        fi

        break
        ;;
      [Nn]* )
        echo 'NOT REMOVING'
        break
        ;;
      * )
        echo "Please answer yes or no."
        ;;
    esac
  done

  exit 0
fi

if [[ ${SHOULD_CLONE_REPOS} = 1 || ${SHOULD_CLONE_LOCAL_REPOS} = 1 ]]; then
  if [[ ${SHOULD_CLONE_REPOS} = 1 && ${SHOULD_CLONE_LOCAL_REPOS} = 1 ]]; then
    echo "--clone and --clone_local cannot be used at the same time"
    exit 1
  fi

  if [ -d "${REPOS_PATH}" ]; then
    echo "Couldn't execute --clone, the directory ${REPOS_PATH} already exists"
    exit 1
  fi
  mkdir "${REPOS_PATH}"

  if [[ ${SHOULD_CLONE_LOCAL_REPOS} = 1 ]]; then
    if [ ! -d "${LOCAL_REPOS_PATH}" ]; then
      echo "Can't clone local repos, the directory ${LOCAL_REPOS_PATH} doesn't exist"
      exit 1
    fi

    OPENPILOT_URL="${LOCAL_OPENPILOT_PATH}"
    ASLAN_URL="${LOCAL_ASLAN_PATH}"
    OPENPILOT_BRIDGE_URL="${LOCAL_OPENPILOT_BRIDGE_PATH}"
    INFERENCE_NODE_BRIDGE_URL="${LOCAL_INFERENCE_NODE_BRIDGE_PATH}" 
  else
    OPENPILOT_URL="git@github.com:pimpke/openpilot.git"
    ASLAN_URL="git@github.com:goloskokovic/Aslan.git"
    OPENPILOT_BRIDGE_URL="git@github.com:pimpke/openpilot-bridge.git"
    INFERENCE_NODE_BRIDGE_URL="git@github.com:pimpke/inference-node-bridge.git"
  fi

  git clone "${OPENPILOT_URL}" --branch "0.8.13-sim" "${OPENPILOT_PATH}"
  git clone --recurse-submodules "${ASLAN_URL}" "${ASLAN_PATH}"
  git clone "${OPENPILOT_BRIDGE_URL}" "${OPENPILOT_BRIDGE_PATH}"
  git clone "${INFERENCE_NODE_BRIDGE_URL}" "${INFERENCE_NODE_BRIDGE_PATH}"
fi

cd ${INFERENCE_NODE_BRIDGE_PATH}/docker

if [ ${SHOULD_BUILD_PROJECTS} = 1 ]; then
  if [ ! -d "${OPENPILOT_BRIDGE_PATH}" ]; then
    echo "Can't build the openpilot project, the directory ${OPENPILOT_BRIDGE_PATH} doesn't exist"
    exit 1
  fi

  SHOULD_BUILD_OPENPILOT=1
  docker-compose rm -f openpilot-client
  docker-compose up openpilot-client
  SHOULD_BUILD_OPENPILOT=0

  if [ ! -d "${ASLAN_PATH}" ]; then
    echo "Can't build the aslan project, the directory ${ASLAN_PATH} doesn't exist"
    exit 1
  fi

  SHOULD_BUILD_ASLAN=1
  docker-compose rm -f aslan
  docker-compose up aslan
  SHOULD_BUILD_ASLAN=0
fi

docker-compose rm -f && docker-compose up
