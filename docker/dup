#!/bin/bash

POSITIONAL_ARGS=()

SHOULD_RUN_DOCKER_COMPOSE_CMD=0
SHOULD_REMOVE_CLONED_REPOS=0
SHOULD_CLONE_REPOS=0
SHOULD_CLONE_HTTPS_REPOS=0
SHOULD_CLONE_LOCAL_REPOS=0
SHOULD_UPDATE_REPOS=0
SHOULD_BUILD_PROJECTS=0
SHOULD_BUILD_OPENPILOT=0
SHOULD_BUILD_ASLAN=0
SHOULD_CLEAN_OPENPILOT=0
SHOULD_RUN_OPENPILOT_SIM=0
SHOULD_RUN_FAKE_CAN=0
SHOULD_RUN_BOARDD=0
SHOULD_USE_TORCH_MODEL=0
PROFILE="local" # TODO: set back to x30
DEBUG_OPENPILOT_BRIDGE=0
DEBUG_INFERENCE_NODE_BRIDGE=0
DEBUG_FAKE_CAN=0
DEBUG_UI=0
SHOULD_EXEC=0

while [[ $# -gt 0 ]]; do
  case $1 in
    --dc)
      SHOULD_RUN_DOCKER_COMPOSE_CMD=1
      shift
      ;;
    --exec)
      SHOULD_EXEC=1
      EXEC_SERVICE_NAME="$2"
      shift
      shift
      ;;
    --profile)
      PROFILE="$2"

      if [[ ! "$PROFILE" =~ ^(local|x30|sim|test_processes)$ ]]; then
        echo "Invalid profile. Aborting..."
        exit 0
      fi

      shift
      shift
      ;;
    --rm_cloned)
      SHOULD_REMOVE_CLONED_REPOS=1
      shift
      ;;
    --github_https)
      SHOULD_CLONE_HTTPS_REPOS=1
      shift
      ;;
    --clone)
      SHOULD_CLONE_REPOS=1
      shift
      ;;
    --clone_local)
      SHOULD_CLONE_LOCAL_REPOS=1
      shift
      ;;
    --update)
      SHOULD_UPDATE_REPOS=1
      shift
      ;;
    --build_projects)
      SHOULD_BUILD_PROJECTS=1
      shift
      ;;
    --build_aslan)
      SHOULD_BUILD_ASLAN=1
      shift
      ;;
    --build_openpilot)
      SHOULD_BUILD_OPENPILOT=1
      shift
      ;;
    --clean_openpilot)
      SHOULD_CLEAN_OPENPILOT=1
      shift
      ;;
#    --sim)
#      SHOULD_RUN_OPENPILOT_SIM=1
#      shift
#      ;;
    --fake_can)
      SHOULD_RUN_FAKE_CAN=1
      shift
      ;;
    --boardd)
      SHOULD_RUN_BOARDD=1
      shift
      ;;
    --use_torch_model)
      SHOULD_USE_TORCH_MODEL=1
      shift
      ;;
    --dbg_openpilot_bridge)
      DEBUG_OPENPILOT_BRIDGE=1
      shift
      ;;
    --dbg_inference_node_bridge)
      DEBUG_INFERENCE_NODE_BRIDGE=1
      shift
      ;;
    --dbg_fake_can)
      DEBUG_FAKE_CAN=1
      shift
      ;;
    --dbg_ui)
      DEBUG_UI=1
      shift
      ;;
    --*|-*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

SHOULD_RUN_TEST_PROCESSES=0

if [[ "${PROFILE}" == "test_processes" ]]; then
  SHOULD_RUN_TEST_PROCESSES=1
fi

if [[ "${PROFILE}" == "sim" ]]; then
  SHOULD_RUN_OPENPILOT_SIM=1
fi

if [[ ${SHOULD_RUN_OPENPILOT_SIM} = 1 && ${SHOULD_RUN_FAKE_CAN} = 1 ]]; then
    echo 'Cannot have both --sim and --fake_can'
    exit 0
fi

DEV_OPS_PATH=$HOME/repos/dev_ops
source "$DEV_OPS_PATH/script_variables.bash"

if [ -z "${inode_pth_model_path}" ]; then
  echo 'Cannot find inode_pth_model_path var'
  exit 1
fi

export INODE_PTH_MODEL_PATH=${inode_pth_model_path}
export ROSBAG_FNAME=${inode_rosbag_fname}

GROUP_ID=$(id -g)
USER_ID=$(id -u)

#REPOS_PATH=${HOME}/inference-repos
REPOS_PATH=${HOME}/repos
OPENPILOT_PATH=${REPOS_PATH}/openpilot
#OPENPILOT_PATH=${REPOS_PATH}/bukapilot
ASLAN_PATH=${REPOS_PATH}/aslan
OPENPILOT_BRIDGE_PATH=${REPOS_PATH}/openpilot-bridge
INFERENCE_NODE_BRIDGE_PATH=${REPOS_PATH}/inference-node-bridge
INFERENCE_NODE_PATH=${REPOS_PATH}/inference_node
TRANSFUSER_PATH=${REPOS_PATH}/transfuser
TWIZY_TRANSFUSER_PATH=${REPOS_PATH}/twizy_transfuser
REPO_PATHS=("${OPENPILOT_PATH}" "${ASLAN_PATH}" "${OPENPILOT_BRIDGE_PATH}" "${INFERENCE_NODE_BRIDGE_PATH}")

LOCAL_REPOS_PATH=${HOME}/repos
LOCAL_OPENPILOT_PATH=${LOCAL_REPOS_PATH}/bukapilot
LOCAL_ASLAN_PATH=${LOCAL_REPOS_PATH}/aslan
LOCAL_OPENPILOT_BRIDGE_PATH=${LOCAL_REPOS_PATH}/openpilot-bridge
LOCAL_INFERENCE_NODE_BRIDGE_PATH=${LOCAL_REPOS_PATH}/inference-node-bridge

call_docker_compose() {
#  docker-compose -f docker-compose-test.yml -f docker-compose.yml --profile ${PROFILE} "$@"
  docker-compose --profile "${PROFILE}" "$@"
}

export SHOULD_RUN_OPENPILOT_SIM
export SHOULD_RUN_FAKE_CAN
export SHOULD_RUN_BOARDD
export SHOULD_RUN_TEST_PROCESSES
export SHOULD_USE_TORCH_MODEL
export DEBUG_OPENPILOT_BRIDGE
export DEBUG_INFERENCE_NODE_BRIDGE
export DEBUG_FAKE_CAN
export DEBUG_UI

export OPENPILOT_PATH
export ASLAN_PATH
export OPENPILOT_BRIDGE_PATH
export INFERENCE_NODE_BRIDGE_PATH
export INFERENCE_NODE_PATH
export TRANSFUSER_PATH
export TWIZY_TRANSFUSER_PATH

export GROUP_ID
export USER_ID

export SHOULD_BUILD_ASLAN
export SHOULD_BUILD_OPENPILOT
export SHOULD_CLEAN_OPENPILOT

if [[ ${SHOULD_RUN_DOCKER_COMPOSE_CMD} = 1 ]] ; then
  cd "${INFERENCE_NODE_BRIDGE_PATH}/docker" || exit

  echo "==========================="
  echo "cmd to run: $*"
  echo "curr dir: $PWD"
  echo "==========================="

  call_docker_compose "$@"
  exit 0
fi

if [ ${SHOULD_EXEC} = 1 ]; then
  cd "${INFERENCE_NODE_BRIDGE_PATH}/docker" || exit
  call_docker_compose exec -it "${EXEC_SERVICE_NAME}" bash -c "tmux a -t default; bash"
  exit 0
fi

if [[ ${SHOULD_UPDATE_REPOS} = 1 ]]; then
    echo 'Update currently unsupported'
    exit 0

    for repo_path in "${REPO_PATHS[@]}"; do
      echo "========== ${repo_path} =========="
      cd "${repo_path}" || exit

      git pull

      cd - > /dev/null || exit
      echo
    done

    exit 0
fi

if [[ ${SHOULD_REMOVE_CLONED_REPOS} = 1 ]]; then
  echo 'Remove currently unsupported'
  exit 0

  for repo_path in "${REPO_PATHS[@]}"; do
      cd "${repo_path}" || exit

      if [ -n "$(git status --porcelain)" ]; then
        echo "Git repo ${repo_path} is not clean, aborting the removal..."
        exit 0
      fi

      cd - > /dev/null || exit
  done

  echo "All changes committed in the cloned repos"
  while true; do
      read -r -p "Do you wish to remove all cloned repos? (yn): " yn
    case $yn in
      [Yy]* )
        echo 'Removing the repos...'

        for repo_path in "${REPO_PATHS[@]}"; do
          sudo rm -rf "${repo_path}"
        done

        if [[ -z "$(ls -A "${REPOS_PATH}")" ]]; then
          rm -rf "${REPOS_PATH}"
        else
          echo "Cannot remove ${REPOS_PATH} directory since it's not empty!"
        fi

        break
        ;;
      [Nn]* )
        echo 'NOT REMOVING'
        break
        ;;
      * )
        echo "Please answer yes or no."
        ;;
    esac
  done

  exit 0
fi

if [[ ${SHOULD_CLONE_REPOS} = 1 || ${SHOULD_CLONE_LOCAL_REPOS} = 1 ]]; then
  echo 'Clone currently unsupported'
  exit 0

  if [[ ${SHOULD_CLONE_REPOS} = 1 && ${SHOULD_CLONE_LOCAL_REPOS} = 1 ]]; then
    echo "--clone and --clone_local cannot be used at the same time"
    exit 1
  fi

  if [ -d "${REPOS_PATH}" ]; then
    echo "Couldn't execute --clone, the directory ${REPOS_PATH} already exists"
    exit 1
  fi
  mkdir "${REPOS_PATH}"

  if [[ ${SHOULD_CLONE_LOCAL_REPOS} = 1 ]]; then
    if [ ! -d "${LOCAL_REPOS_PATH}" ]; then
      echo "Can't clone local repos, the directory ${LOCAL_REPOS_PATH} doesn't exist"
      exit 1
    fi

    OPENPILOT_URL="${LOCAL_OPENPILOT_PATH}"
    ASLAN_URL="${LOCAL_ASLAN_PATH}"
    OPENPILOT_BRIDGE_URL="${LOCAL_OPENPILOT_BRIDGE_PATH}"
    INFERENCE_NODE_BRIDGE_URL="${LOCAL_INFERENCE_NODE_BRIDGE_PATH}" 
  else
    if [[ ${SHOULD_CLONE_HTTPS_REPOS} = 1 ]]; then
      OPENPILOT_URL="https://github.com/pimpke/openpilot.git"
      ASLAN_URL="https://github.com/goloskokovic/Aslan.git"
      OPENPILOT_BRIDGE_URL="https://github.com/pimpke/openpilot-bridge.git"
      INFERENCE_NODE_BRIDGE_URL="https://github.com/pimpke/inference-node-bridge.git"
    else
      OPENPILOT_URL="git@github.com:pimpke/openpilot.git"
      ASLAN_URL="git@github.com:goloskokovic/Aslan.git"
      OPENPILOT_BRIDGE_URL="git@github.com:pimpke/openpilot-bridge.git"
      INFERENCE_NODE_BRIDGE_URL="git@github.com:pimpke/inference-node-bridge.git"
    fi
  fi

  git clone "${OPENPILOT_URL}" --branch "0.8.13-sim" "${OPENPILOT_PATH}"
  git clone --recurse-submodules "${ASLAN_URL}" "${ASLAN_PATH}"
  git clone "${OPENPILOT_BRIDGE_URL}" "${OPENPILOT_BRIDGE_PATH}"
  git clone "${INFERENCE_NODE_BRIDGE_URL}" "${INFERENCE_NODE_BRIDGE_PATH}"
fi

cd "${INFERENCE_NODE_BRIDGE_PATH}/docker" || exit

if [[ ${SHOULD_BUILD_PROJECTS} = 1 ]]; then
  SHOULD_BUILD_ASLAN=1
  SHOULD_BUILD_OPENPILOT=1
fi

if [[ ${SHOULD_BUILD_OPENPILOT} = 1 ]]; then
  if [ ! -d "${OPENPILOT_BRIDGE_PATH}" ]; then
    echo "Can't build the openpilot project, the directory ${OPENPILOT_BRIDGE_PATH} doesn't exist"
    exit 1
  fi

  call_docker_compose rm -f openpilot-client
  call_docker_compose up openpilot-client
fi

if [[ ${SHOULD_BUILD_ASLAN} = 1 ]]; then
  if [ ! -d "${ASLAN_PATH}" ]; then
    echo "Can't build the aslan project, the directory ${ASLAN_PATH} doesn't exist"
    exit 1
  fi

  call_docker_compose rm -f aslan
  call_docker_compose up aslan
fi

if [[ ${SHOULD_BUILD_ASLAN} = 1 || ${SHOULD_BUILD_OPENPILOT} = 1 ]]; then
  echo "Finished building project(s), exiting..."
  exit 0
fi

if [[ ${SHOULD_RUN_OPENPILOT_SIM} = 1 ]]; then
    xhost +local:root
fi

call_docker_compose rm -f && call_docker_compose up
